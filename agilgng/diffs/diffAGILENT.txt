Comparing files C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py and C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py


import agilent_SCPI
import string
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

import agilent_scpi
import string
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
import math
import Gnuplot
#, Numeric

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
import math

import Gnuplot

def _create_plot(self):#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        from matplotlib.figure import Figure
        from matplotlib.backends.backend_gtkagg import FigureCanvasGTKAgg as FigureCanvas
        from matplotlib.numerix import arange, sin, pi

        figure = Figure(figsize=(5, 4), dpi=100)
        canvas = FigureCanvas(figure)  # a gtk.DrawingArea
        #win.add(canvas)

        axes = figure.add_subplot(111)
        x = arange(0.0, 30.0, 0.01)
        y = sin(2 * pi * x)
        line, = axes.plot(x, y)
        axes.set_title('hi mom')
        axes.grid(True)
        axes.set_xlabel('time')
        axes.set_ylabel('volts')

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

class agilent (agilent_SCPI.agilent_SCPI) :
        
    gnuplot = None
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY


class Agilent (agilent_scpi.AgilentSCPI):

    gnuplot = None
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

    def __init__(self) :
        agilent_SCPI.agilent_SCPI.__init__(self)

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

    def __init__(self):
        agilent_scpi.AgilentSCPI.__init__(self)

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

        #self.sendCmd('disp:form:expand on')
        self.sendCmd('calc1:form smit')
        self.sendCmd('init1:cont off')
        self.sendCmd('sens1:swe:poin 1601; *wai')
        #self.sendCmd('sens1:swe:poin 21; *wai')
        #self.sendCmd('sens1:swe:poin?')
        #points = int( self.readData() )
        self.sendCmd('form:data asc,12')

        self.sendCmd('sens1:freq:star?')
        self.frequency['start'] = float(self.readData())
        self.sendCmd('sens1:freq:stop?')
        self.frequency['stop'] = float(self.readData())

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY !!!!!!!!!!!!!!!!!!!!!!!!!

        #self.send_cmd('disp:form:expand on')
        self.send_cmd(':syst:pres')#!!!!!!!!!!!!!!
        self.send_cmd(':calc1:form smit')
        #self.send_cmd(':init1:cont off') !!!!!!!!!!!
        self.send_cmd(':init1:cont on')
        self.send_cmd(':abor')
        self.send_cmd(':sens1:swe:poin 1601')
        #self.send_cmd('sens1:swe:poin 21; *wai')
        #self.send_cmd('sens1:swe:poin?')
        #points = int( self.read_data() )
        #self.send_cmd(':form:data asc,12')
        self.send_cmd(':form:data asc')#!!!!!!!!!!!!
        self.send_cmd('*wai') #!!!!!!!!!!!!!!

        self.send_cmd(':sens1:freq:star?')
        self.frequency['start'] = float(self.read_data())
        self.send_cmd(':sens1:freq:stop?')
        self.frequency['stop'] = float(self.read_data())

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
        #self.gnuplot('set data style lines')
        self.gnuplot('set style data lines')
        self.gnuplot('set xtics border mirror norotate')
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
        #self.gnuplot('set data style lines')
        self.gnuplot('set data style linespoints')#!!!!!!!!!!!!!!!!!!!!!!!!!!
        self.gnuplot('set xtics border mirror norotate')
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
        self.gnuplot('set y2label "phase, rad"')
        #self.gnuplot('set title "QCM"')

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
        self.gnuplot('set y2label "phase, rad"')
        self.gnuplot('set title "QCM"')#!!!!!!!!!!!!!!!!!!!!!!!

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

    def __del__(self) :
        del self.gnuplot
        agilent_SCPI.agilent_SCPI.__del__(self)

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

    def __del__(self):
        del self.gnuplot
        agilent_scpi.AgilentSCPI.__del__(self)

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

    def setFrequency(self, start = '', stop = '', center = '', span = '') :
        if start :
            self.sendCmd('sens1:freq:star ' + start)
        if stop :
            self.sendCmd('sens1:freq:stop ' + stop)
        if center :
            self.sendCmd('sens1:freq:cent ' + center)
        if span :
            self.sendCmd('sens1:freq:span ' + span)
        
        self.sendCmd('sens1:freq:start?')
        self.frequency['start'] = float(self.readData())
        
        self.sendCmd('sens1:freq:stop?')
        self.frequency['stop'] = float(self.readData())

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

    def set_frequency(self, start='', stop='', center='', span=''):
        if start :
            self.send_cmd(':sens1:freq:star ' + start)
        if stop :
            self.send_cmd(':sens1:freq:stop ' + stop)
        if center :
            self.send_cmd(':sens1:freq:cent ' + center)
        if span :
            self.send_cmd(':sens1:freq:span ' + span)

        self.send_cmd('*wai')#!!!!!!!!!!!!!!!!!!
        
        self.send_cmd(':sens1:freq:start?')
        self.frequency['start'] = float(self.read_data())
        
        self.send_cmd(':sens1:freq:stop?')
        self.frequency['stop'] = float(self.read_data())

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py


    def measure(self) :
        self.data['frequency'] = []
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

    def measure(self):
        self.data['frequency'] = []
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

        self.sendCmd('init1:cont off')
        
        self.sendCmd('init1; *wai')
        self.sendCmd('trac? ch1fdata')
        data = self.readData()
        
        self.sendCmd('sens1:freq:star?')
        self.frequency['start'] = float(self.readData())
        
        self.sendCmd('sens1:freq:stop?')
        self.frequency['stop'] = float(self.readData())

        self.sendCmd('init1:cont on')

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

        self.send_cmd(':init1:cont off')
        #self.send_cmd(':disp:enab off')
        
        #self.send_cmd(':init1')#???
        self.send_cmd('*wai')
        #self.send_cmd(':trac? ch1fdata')#??? Dave 117 strana v prog. doc.
        #self.send_cmd(':calc1:freq:data?')
        self.send_cmd(':calc1:data:fdat?')# TODO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        #self.send_cmd(':sens1:freq:data?')
        data = self.read_data()
        #print data
        
        self.send_cmd(':sens1:freq:star?')
        self.frequency['start'] = float(self.read_data())
        
        self.send_cmd(':sens1:freq:stop?')
        self.frequency['stop'] = float(self.read_data())

        self.send_cmd('*wai')#!!!!!!!!!!!!!!!
        #self.send_cmd(':disp:upd')
        #self.send_cmd(':disp:enab on')
        self.send_cmd(':init1:cont on')

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
        data = string.split(data, ',')

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
        data = string.split(data, ',')
        #print len(data)

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
        gamma = []    # agilent device output data
        for i in range(0, len(data), 2) :
            gamma.append(complex(float(data[i]), float(data[i+1])))
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
        gamma = []    # agilent device output data
        for i in range(0, len(data), 2):
            #print data[i], float(data[i]), data[i+1], float(data[i+1])
            gamma.append(complex(float(data[i]), float(data[i+1])))
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
        frequency = self.frequency['start']
        step = (self.frequency['stop'] - self.frequency['start'])/(len(gamma)-1)
        for i in range(len(gamma)) :
            self.data['frequency'].append(frequency)
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
        frequency = self.frequency['start']
        step = (self.frequency['stop'] - self.frequency['start']) / (len(gamma)-1)
        for i in range(len(gamma)):
            self.data['frequency'].append(frequency)
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

        for g in  gamma :
            z = 50 * ( (1 + g) / (1 - g) )
            self.data['Z'].append(z)
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

        for g in gamma:
            #z = 50 * ( (1 + g) / (1 - g) ) # old aggilent devices
            z = g
            self.data['Z'].append(z)
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py


    def plotData(self) :
        #x = Numeric.arange(len(self.data['Z']))
        self.gnuplot('set xrange [%f:%f]' % (self.frequency['start']-100, self.frequency['stop']+100))
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

        return self.data # !!!!!!!!!!!!!!!! predtym metoda vravia data (def measure(self):)


    def plot_data(self):
        self.gnuplot('set xrange [%f:%f]' % (self.frequency['start']-100, self.frequency['stop']+100))
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
        self.gnuplot.plot(
#            Gnuplot.Data(    self.data['frequency'],
#                    self.data['impedance'],
#                    title='impedance',
#                    axes='x1y1',
#                    inline=1
#                    ),
            Gnuplot.Data(    self.data['frequency'],
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
        self.gnuplot.plot(
            #Gnuplot.Data(    self.data['frequency'],
            #        self.data['impedance'],
            #        title='impedance',
            #        axes='x1y1',
            #        inline=1
            #        ),
            Gnuplot.Data(    self.data['frequency'],
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

    def saveData(self, fileName = '') :
        if not fileName :
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

    def save_data(self, fileName=''):
        if not fileName :
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

        dataFile = open(fileName, 'a')
        dataFile.write('\n\n')
        dataFile.write('#' + '-'*140 + '\n')
        dataFile.write('# frequency\t\t| Z.real\t\t| Z.imag\t\t| |Z|\t\t\t| phase\t\t\t| admitance\n')
        dataFile.write('#' + '-'*140 + '\n')
        for i in range(len(self.data['Z'])) :
            dataFile.write('%+.12e' % self.data['frequency'][i])
            dataFile.write('\t')
            dataFile.write('%+.12e' % self.data['Z'][i].real)
            dataFile.write('\t')
            dataFile.write('%+.12e' % self.data['Z'][i].imag)
            dataFile.write('\t')
            dataFile.write('%+.12e' % self.data['impedance'][i])
            dataFile.write('\t')
            dataFile.write('%+.12e' % self.data['phase'][i])
            dataFile.write('\t')
            dataFile.write('%+.12e' % self.data['admitance'][i])
            dataFile.write('\n')
        dataFile.close()

***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

        datafile = open(fileName, 'a')
        datafile.write('\n\n')
        datafile.write('#' + '-'*140 + '\n')
        datafile.write('# frequency\t\t| Z.real\t\t| Z.imag\t\t| |Z|\t\t\t| phase\t\t\t| admitance\n')
        datafile.write('#' + '-'*140 + '\n')
        for i in range(len(self.data['Z'])) :
            datafile.write('%+.12e' % self.data['frequency'][i])
            datafile.write('\t')
            datafile.write('%+.12e' % self.data['Z'][i].real)
            datafile.write('\t')
            datafile.write('%+.12e' % self.data['Z'][i].imag)
            datafile.write('\t')
            datafile.write('%+.12e' % self.data['impedance'][i])
            datafile.write('\t')
            datafile.write('%+.12e' % self.data['phase'][i])
            datafile.write('\t')
            datafile.write('%+.12e' % self.data['admitance'][i])
            datafile.write('\n')
        datafile.close()

*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

###############################################################################


if __name__ == '__main__':
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

if __name__ == '__main__':
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py

    a = agilent()
    
    a.setFrequency(span = '100 MHz')
    a.setFrequency(center = '%f Hz' % 700000000)
    
    a.measure()
    a.saveData('x.dat')
    a.plotData()
    raw_input('Press enter')
    
    #import sys
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY

    a = Agilent()

    a.set_frequency(span = '%f' % 100000000)
    a.set_frequency(center = '%f' % 700000000)

    a.measure()
    print a.read_err()
    a.save_data('x.dat')
    a.plot_data()
    raw_input('Press enter')

    #import sys
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
    #sys.exit()
    
    max = max(a.data['admitance'])
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
    #sys.exit()

    #for i in range(len(a.data['admitance'])):
    #    print a.data['frequency'][i], a.data['admitance'][i], a.data['phase'][i]
    #print '---------'

    max = max(a.data['admitance'])
*****

***** C:\USERS\DAVE\DESKTOP\TIS\AGIL\agilent.py
    print maxIndex, a.data['frequency'][maxIndex]
    a.setFrequency(center = '%f Hz' % a.data['frequency'][maxIndex])
    print a.readErr()
    
    a.measure()
    a.plotData()
    raw_input('Press enter')
***** C:\USERS\DAVE\DESKTOP\TIS\AGILGNG\AGILENT.PY
    print maxIndex, a.data['frequency'][maxIndex]
    a.set_frequency(center = '%f' % a.data['frequency'][maxIndex])
    print a.read_err()

    a.measure()
    a.plot_data()
    raw_input('Press enter')
*****

